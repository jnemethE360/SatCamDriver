
//***************************************************************************
//*																			*
//*																			*
//*																			*
//*  DO NOT MODIFY THIS FILE - IT IS AUTOGENERATED FROM THE DRIVER DESIGN   *
//*																			*
//*																			*
//*																			*
//***************************************************************************

using System;
using System.Drawing;
using System.ServiceModel;
using System.Windows.Forms;
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using CNL.IPSecurityCenter.Driver;
using CNL.IPSecurityCenter.Driver.Attributes;
using CNL.IPSecurityCenter.Driver.ServiceLocation;
using CNL.IPSecurityCenter.Driver.Video;
using CNL.IPSecurityCenter.Driver.Video.DeviceConnection;
using CNL.IPSecurityCenter.Driver.Video.Playback;
using CNL.IPSecurityCenter.Driver.Video.Export;
using CNL.IPSecurityCenter.Driver.Ptz;
using VideoDeviceInterfaceDescriptor = CNL.IPSecurityCenter.Driver.Video.DeviceConnection.DeviceInterfaceDescriptor;



namespace Edge360.IPSC.Driver.Axis
{
    /// <summary>
    /// Video control for the VideoServer.
    /// </summary>
    public partial class VideoServerVideoControl : 
		UserControl
		, ILiveVideoControl 		, IPlaybackVideoControl 		, ICapture 		, IPtz 		, IPresets     {
		 
        private PlaybackCapabilities m_playbackCapabilities = new PlaybackCapabilities(new float[] { 1f }, new float[] { 1f });
		
        /// <summary>
        /// Raised when the status of the output control changes.
        /// </summary>
        /// <remarks>
        /// This is raised to indicate that a connection has been successfully established, if
        /// there is a problem displaying the output control for the device, or if the output control
        /// becomes disconnected from the device and is no longer able to display the output for it.
        /// </remarks>
        public event EventHandler<VideoControlStateChangedEventArgs> StateChanged;

        
        /// <summary>
        /// Raised when the playback date changes.
        /// </summary>
        public event EventHandler<FrameDateChangedEventArgs> FrameDateChanged;

        /// <summary>
        /// Raised when the channel information for a device changes.
        /// </summary>
        public event EventHandler<ChannelEventArgs> ChannelInformationChanged;

        /// <summary>
        /// Gets whether the camera being displayed supports video playback.
        /// </summary>
        /// <value></value>
        /// <returns>True if the camera is supports playback, False otherwise.</returns>
        public virtual bool IsPlaybackVideoEnabled
        {
            get { return true; }
        }

		/// <summary>
        /// Gets the playback capabilities for the device.
        /// </summary>
        /// <value></value>
        /// <returns>
        /// A <see cref="PlaybackCapabilities"/> instance giving the playback
        /// capabilities for the device.
        /// </returns>
        public virtual PlaybackCapabilities PlaybackCapabilities
        {
            get { return m_playbackCapabilities; }
        }

		/// <summary>
        /// Raises the <see cref="E:FrameDateChanged"/> event.
        /// </summary>
        /// <param name="e">The <see cref="CNL.IPSecurityCenter.Driver.Video.Playback.FrameDateChangedEventArgs"/> instance containing the event data.</param>
        protected void OnFrameDateChanged(FrameDateChangedEventArgs e)
        {
            if (FrameDateChanged != null)
            {
                FrameDateChanged.Invoke(this, e);
            }
        }

        /// <summary>
        /// Raises the <see cref="E:ChannelInformationChanged"/> event.
        /// </summary>
        /// <param name="e">The <see cref="CNL.IPSecurityCenter.Driver.Video.Playback.ChannelEventArgs"/> instance containing the event data.</param>
        protected void OnChannelInformationChanged(ChannelEventArgs e)
        {
            if (ChannelInformationChanged != null)
            {
                ChannelInformationChanged.Invoke(this, e);
            }
        }

        
		/// <summary>
        /// Raises the <see cref="StateChanged"/> event.
        /// </summary>
        /// <param name="state">The new state of the video control.</param>
        protected void OnStateChanged(VideoControlState state)
        {
            OnStateChanged(state, string.Empty, string.Empty);
        }

        /// <summary>
        /// Raises the <see cref="StateChanged"/> event.
        /// </summary>
        /// <param name="state">The new state of the video control.</param>
        /// <param name="description">The description.</param>
        protected void OnStateChanged(VideoControlState state, string description)
        {
            OnStateChanged(state, description, string.Empty);
        }

        /// <summary>
        /// Raises the <see cref="StateChanged"/> event.
        /// </summary>
        /// <param name="state">The new state of the video control.</param>
        /// <param name="description">The description.</param>
        /// <param name="additionalInfo">The additional info.</param>
        protected void OnStateChanged(VideoControlState state, string description, string additionalInfo)
        {
            var displayOptions = state == VideoControlState.Information
                    ? new StatusDisplayOptions(true, true)
                    : StatusDisplayOptions.Default;

			var e = new VideoControlStateChangedEventArgs(state, description, additionalInfo, displayOptions);

            OnStateChanged(e);
        }

		/// <summary>
        /// Raises the <see cref="StateChanged"/> event.
        /// </summary>
        /// <param name="e">The new state event arguments.</param>
		protected void OnStateChanged(VideoControlStateChangedEventArgs e)
		{
			if (StateChanged != null)
				StateChanged.Invoke(this, e);
		}
    }
}

